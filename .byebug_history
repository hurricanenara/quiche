c
sk
c
n
c
n
sk
skip
c
skip
c
disp prev
prev
c
(Time.now <= Time.parse("04:00 PM") && !weekend) ? Time.now.strftime("%I:%M %p") : "04:00 PM"
(Time.now <= Time.parse("04:00 PM")) ? Time.now.strftime("%I:%M %p") : "04:00 PM"
(Time.now <= Time.parse("04:00 PM") || !weekend) ? Time.now.strftime("%I:%M %p") : "04:00 PM"
weekend = todayDate.saturday? || todayDate.sunday?
todayDate = Time.now
weekend = todayDate.saturday? || todayDate.sunday?
(Time.now <= Time.parse("04:00 PM") || !weekend) ? Time.now.strftime("%I:%M %p") : "04:00 PM"
label_now
c
holdings_snapshot
c
buys[0]
c
cur
prev
c
holdings_snapshot
c
buys[0]
buys.empty?
buys = self.transaction_records.where(transaction_type: "Buy", created_at: prev..cur).to_a
self.transaction_records.where(transaction_type: "Buy", created_at: prev..cur).to_a
buys
buys.empty?
buys[0]
buy[0]
self.transaction_records.where(transaction_type: "Buy", created_at: prev..cur).to_a
initial
c
buys[0]
c
q
self.transaction_records.where(transaction_type: "Buy", created_at: prev..cur).to_a.count
self.transaction_records.where(transaction_type: "Buy", created_at: prev..cur).to_a
self.transaction_records.where(transaction_type: "Buy", created_at: prev..cur).to_a[0].empty?
self.transaction_records.where(transaction_type: "Buy", created_at: prev..cur).to_a[0]
self.transaction_records.where(transaction_type: "Buy", created_at: prev..cur).to_a
c
q
buys
buys[0].exists?(:id)
buys.id
buys
buys[0].id == nil
buys[0].id
buys.count
buys.present?
buys.blank?
buys[0]
buys
buys[0]
buys.empty?
buys.exists?
buys[0] || 'hi'
buys[0]
c
initial
c
market_open
today
@current_user.id
c
holdings_snapshot
c
weekend
new_day
q
PortfoDatum.count
q
@all_data.count
c
holdings_snapshot
c
initial
c
buys[0] == nil
buys[0]
buys[0].exists
buys[0].exists?
c
initial
q
q'
buys.empty?
buys[0].empty?
buys[0] || 'hi'
buys[0] || 'hi]
buys[0]
c
initial
c
holdings_snapshot
c
sells[0]
c
buys.count
c
!buys[0]
buys[0]
buys[0] == true
c
initial
q
self.transaction_records.where(transaction_type: "Buy", created_at: prev..cur)[0]
self.transaction_records.where(transaction_type: "Buy", created_at: prev..cur) == false[0]
buys
!!self.transaction_records.where(transaction_type: "Buy", created_at: prev..cur)
!self.transaction_records.where(transaction_type: "Buy", created_at: prev..cur)
 self.transaction_records.where(transaction_type: "Buy", created_at: prev..cur) == false
 self.transaction_records.where(transaction_type: "Buy", created_at: prev..cur) == true
 self.transaction_records.where(transaction_type: "Buy", created_at: prev..cur)
cur
prev
holdings_snapshot
initial
c
new_day
c
holdings_snapshot
c
buys.count
c
holdings_snapshot
initial
c
holdings_snapshot
c
holdings_snapshot
exit
c
sells.count
sells
c
buys
c
self.transaction_records.where(transaction_type: "Buy", created_at: prev..cur)
buys
exit
self.transaction_records.where(transaction_type: "Buy", created_at: prev..cur)[0]
self.transaction_records.where(transaction_type: "Buy", created_at: prev..cur).count
self.transaction_records.where(transaction_type: "Buy", created_at: prev..cur).is_a?Array
self.transaction_records.where(transaction_type: "Buy", created_at: prev..cur)
self
c
@current_user.transaction_records.where(transaction_type: "Buy", created_at: prev..cur)
@current_user
demo
holdings_snapshot
c
PortfoDatum.where(user_id: @current_user.id).last(79).count
PortfoDatum.where(user_id: @current_user.id).last(79)
c
PortfoDatum.where(user_id: @current_user.id).last(78)
c
market_open
q
c
y
q
c
(last_label += (5 * 60)).strftime("%I:%M %p")
last_label
c
@last_portfo_data.label
last_label
c
(last_update_lapsed / five_min).floor
c
(last_update_lapsed / five_min).floor
last_update_lapsed / five_min
five_min
last_update_lapsed
last_update_lapsed > five_min
c
Time.parse("9:30 AM")
today_open
c
new_day
c
Rating.find_by(ticker: params[:ticker])
params
@rating
c
params
c
@rating.save
@rating
rating_params
c
{portfo: @portfo_record, holdings: @user_holdings}
json: {portfo: @portfo_record, holdings: @user_holdings}
c
@current_user_id
c
17317+6.33
last_cash_balance
params[:order]
params
c
json: { holdings: @user_holdings }
c
@current_user.holdings
@current_user
c
@current_user
User.find(46)
q
@current_user_id
c
@portfo_record
c
Transaction.last(@records.length)
Transaction.last(@records.length
c
transaction_obj.save
c
Transaction.new(transaction_params)
c
transaction_params
params[:order]
params
q
params
transaction_params
@records
transaction_obj.save!
transaction_obj.save
c
@records
c
params[:order][:transaction_type]
Portfolio.where(user_id: @current_user_id).last.balance
@bank_trans
params[:order]
params
@transaction_qt
q
@transaction_qt
@records
@current_user_id
@bank_trans
c
