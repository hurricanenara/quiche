c
json: { holdings: @user_holdings }
c
@current_user.holdings
@current_user
c
@current_user
User.find(46)
q
@current_user_id
c
@portfo_record
c
Transaction.last(@records.length)
Transaction.last(@records.length
c
transaction_obj.save
c
Transaction.new(transaction_params)
c
transaction_params
params[:order]
params
q
params
transaction_params
@records
transaction_obj.save!
transaction_obj.save
c
@records
c
params[:order][:transaction_type]
Portfolio.where(user_id: @current_user_id).last.balance
@bank_trans
params[:order]
params
@transaction_qt
q
@transaction_qt
@records
@current_user_id
@bank_trans
c
last_cash_balance
c
@portfolio_data
c
@portfolio_data
@current_user_id
c
Portfolio.where(user_id: 46)
Portfolio.where('user_id = ?', @current_user_id).last
@current_user
@portfolio_data
c
:bank_index
c
Portfolio.where(user_id: @current_user_id).last.balance
last_cash_balance
c
@bank_trans.save!
@bank_trans.save
params[:transaction_type]
c
params
transaction_params
params
@bank_trans
Portfolio.where(user_id: @current_user_id).last.balance
@current_user_id
params
                    })
                        balance: last_cash_balance += @bank_trans.transaction_amount,
                        user_id: @current_user_id,
Portfolio.create({
@portfo_record
c
Portfolio.where(user_id: @current_user_id).last.balance
params
c
params
params[:transaction_amount]
Portfolio.where(user_id: @current_user_id).last.balance
c
@saved_records.length
@saved_records
c
@records.count
c
@records.length
@records
c
transaction_obj
transaction_obj.save
c
last_cash_balance -= params[:transaction_amount].to_i
c
q
last_cash_balance -= params[:transaction_amount]
params[:transaction_type]
c
q
params[:transaction_amount]
last_cash_balance
c
 params[:transaction_amount]
params[:quantity].to_i * params[:cost_per_share].to_i
c
last_cash_balance
Portfolio.where(user_id: @current_user_id).last.balance
Portfolio.where(user_id: @current_user_id).last
Portfolio.where(user_id: @current_user_id)
@current_user_id
params[:user_id]
params
last_cash_balance
c
continue
params
params[:quantity] = 2
transaction_params
params
params[:quantity] = "1"
transaction_params
transaction_params[:quantity] = "1"
transaction_params
params
diced
diced = params[:quantity] = "3"
params[:quantity]
params
params[:quantity] = "1"
params[:quantity]
params
transaction_params
params
transaction_params.update(quantity: "1")
transaction_params
transaction_params["quantity"]
transaction_params["quantity"] = "1"
transaction_params["quantity"]
transaction_params["quantity"] = 1
transaction_params["quantity"].to_i
transaction_params["quantity"].is_a?(String)
transaction_params["quantity"].is_a?
type(transaction_params["quantity"])
transaction_params["quantity"]
transaction_params.quantity
transaction_params
c
@portfo_record
c
@transaction_record.transaction.type
@transaction_record.transaction.type == "Deposit"
c
@transaction_record.transaction_type
!!@transaction_record.save
c
@transaction_record.save!
transaction_params
!!@transaction_record.save
@transaction_record
c
@transaction_record.update(transaction_amount: @transaction_record.quantity * @transaction_record.cost_per_share)
!!@transaction_record.save
c
@transaction_record.save
@transaction_record
@transaction.record
c
@transaction_record.save!
@transaction_record.save
@transaction_record
c
transaction_params
current_user
c
@watchlist_asset.save!
@watchlist_asset
params
c
params
c
params
c
@watchlist_asset
c
@watchlist_asset.save!
watchlist_params
@watchlist_asset.save!
params
@watchlist_asset.save
@watchlist.save
@watchlist..save
Watchlist.exists?(ticker: params[:ticker], user_id: params[:user_id])
@watchlist_asset
c
@watchlist_assets
c
Asset.first.class
Asset.first.id
Asset.first
Asset.where(ticker: watchlist_params[:ticker])
Asset.where(ticker: watchlist_params[:ticker]).id
@watchlist_asset
c
watchlist_params
c
watchlist_params
c
@watchlist_assets
c
c\
c
watchlist_params
c
@watchlist_asset
watchlist_params
c
watchlist_params
c
watchlist_params
params
c
watchlist_params
params
!Watchlist.exists?(watchlist_params)
c
cc
params
c
watchlist_params
params
c
params
param
c
data
params
c
@current_user
current_ueser
current_uesr
params
watchlist_params
c
params
watchlist_params
c
watchlist_params
params
c
Watchlist.where('user_id = ?', current_user.id)
current_user.id
current_user
