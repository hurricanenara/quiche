c
holdings_snapshot
c
holdings_snapshot
exit
c
sells.count
sells
c
buys
c
self.transaction_records.where(transaction_type: "Buy", created_at: prev..cur)
buys
exit
self.transaction_records.where(transaction_type: "Buy", created_at: prev..cur)[0]
self.transaction_records.where(transaction_type: "Buy", created_at: prev..cur).count
self.transaction_records.where(transaction_type: "Buy", created_at: prev..cur).is_a?Array
self.transaction_records.where(transaction_type: "Buy", created_at: prev..cur)
self
c
@current_user.transaction_records.where(transaction_type: "Buy", created_at: prev..cur)
@current_user
demo
holdings_snapshot
c
PortfoDatum.where(user_id: @current_user.id).last(79).count
PortfoDatum.where(user_id: @current_user.id).last(79)
c
PortfoDatum.where(user_id: @current_user.id).last(78)
c
market_open
q
c
y
q
c
(last_label += (5 * 60)).strftime("%I:%M %p")
last_label
c
@last_portfo_data.label
last_label
c
(last_update_lapsed / five_min).floor
c
(last_update_lapsed / five_min).floor
last_update_lapsed / five_min
five_min
last_update_lapsed
last_update_lapsed > five_min
c
Time.parse("9:30 AM")
today_open
c
new_day
c
Rating.find_by(ticker: params[:ticker])
params
@rating
c
params
c
@rating.save
@rating
rating_params
c
{portfo: @portfo_record, holdings: @user_holdings}
json: {portfo: @portfo_record, holdings: @user_holdings}
c
@current_user_id
c
17317+6.33
last_cash_balance
params[:order]
params
c
json: { holdings: @user_holdings }
c
@current_user.holdings
@current_user
c
@current_user
User.find(46)
q
@current_user_id
c
@portfo_record
c
Transaction.last(@records.length)
Transaction.last(@records.length
c
transaction_obj.save
c
Transaction.new(transaction_params)
c
transaction_params
params[:order]
params
q
params
transaction_params
@records
transaction_obj.save!
transaction_obj.save
c
@records
c
params[:order][:transaction_type]
Portfolio.where(user_id: @current_user_id).last.balance
@bank_trans
params[:order]
params
@transaction_qt
q
@transaction_qt
@records
@current_user_id
@bank_trans
c
last_cash_balance
c
@portfolio_data
c
@portfolio_data
@current_user_id
c
Portfolio.where(user_id: 46)
Portfolio.where('user_id = ?', @current_user_id).last
@current_user
@portfolio_data
c
:bank_index
c
Portfolio.where(user_id: @current_user_id).last.balance
last_cash_balance
c
@bank_trans.save!
@bank_trans.save
params[:transaction_type]
c
params
transaction_params
params
@bank_trans
Portfolio.where(user_id: @current_user_id).last.balance
@current_user_id
params
                    })
                        balance: last_cash_balance += @bank_trans.transaction_amount,
                        user_id: @current_user_id,
Portfolio.create({
@portfo_record
c
Portfolio.where(user_id: @current_user_id).last.balance
params
c
params
params[:transaction_amount]
Portfolio.where(user_id: @current_user_id).last.balance
c
@saved_records.length
@saved_records
c
@records.count
c
@records.length
@records
c
transaction_obj
transaction_obj.save
c
last_cash_balance -= params[:transaction_amount].to_i
c
q
last_cash_balance -= params[:transaction_amount]
params[:transaction_type]
c
q
params[:transaction_amount]
last_cash_balance
c
 params[:transaction_amount]
params[:quantity].to_i * params[:cost_per_share].to_i
c
last_cash_balance
Portfolio.where(user_id: @current_user_id).last.balance
Portfolio.where(user_id: @current_user_id).last
Portfolio.where(user_id: @current_user_id)
@current_user_id
params[:user_id]
params
last_cash_balance
c
continue
params
params[:quantity] = 2
transaction_params
params
params[:quantity] = "1"
transaction_params
transaction_params[:quantity] = "1"
transaction_params
params
diced
diced = params[:quantity] = "3"
params[:quantity]
params
params[:quantity] = "1"
params[:quantity]
params
transaction_params
params
transaction_params.update(quantity: "1")
transaction_params
transaction_params["quantity"]
transaction_params["quantity"] = "1"
transaction_params["quantity"]
transaction_params["quantity"] = 1
transaction_params["quantity"].to_i
transaction_params["quantity"].is_a?(String)
transaction_params["quantity"].is_a?
type(transaction_params["quantity"])
transaction_params["quantity"]
transaction_params.quantity
transaction_params
c
@portfo_record
c
@transaction_record.transaction.type
@transaction_record.transaction.type == "Deposit"
c
@transaction_record.transaction_type
!!@transaction_record.save
c
@transaction_record.save!
transaction_params
!!@transaction_record.save
@transaction_record
c
@transaction_record.update(transaction_amount: @transaction_record.quantity * @transaction_record.cost_per_share)
!!@transaction_record.save
c
@transaction_record.save
@transaction_record
@transaction.record
c
@transaction_record.save!
@transaction_record.save
@transaction_record
c
transaction_params
current_user
c
@watchlist_asset.save!
@watchlist_asset
params
c
